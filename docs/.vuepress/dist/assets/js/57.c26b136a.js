(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{457:function(s,n,e){"use strict";e.r(n);var a=e(6),r=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("前言：该基类实现了基本的增删改查,包含过滤、分页等功能。其他模型类继承该基类即可。如果需要连表查询,可\n重写方法。")]),s._v(" "),n("h3",{attrs:{id:"_01、代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_01、代码实现"}},[s._v("#")]),s._v(" 01、代码实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('# -*- ecoding: utf-8 -*-\n# @ModuleName: baseModel\n# @Mail: 15717163552@163.com\n# @Author: mozhouqiu\n# @Time: 2022/9/21 19:56\nfrom sqlalchemy import desc, asc\nfrom sqlalchemy_serializer import SerializerMixin\nfrom sqlalchemy.orm import sessionmaker, scoped_session\nfrom sqlalchemy import create_engine\n\n# 建立数据库连接实例\nengine = create_engine(\n        "mysql+pymysql://root:123456@127.0.0.1:3306/demo?charset=utf8",\n        max_overflow=0,  # 超过连接池大小外最多创建的连接\n        pool_size=5,  # 连接池大小\n        pool_timeout=30,  # 池中没有线程最多等待的时间，否则报错\n        pool_recycle=-1  # 多久之后对线程池中的线程进行一次连接的回收（重置）\n    )\n\nobj_session = sessionmaker(bind=engine)\n# 使用scoped_session,防止线程不安全\ndBSession = scoped_session(obj_session)\n\n\nclass BaseModel(SerializerMixin):\n\n    @staticmethod\n    def getList(cls_,filters,order,field,offset,limit):\n        """\n        列表\n        @param object cls_ 数据库模型实体类\n        @param set filters 查询条件\n        @param str order 排序    "id desc"\n        @param tuple field 字段\n        @param int offset 偏移量\n        @param int limit 取多少条\n        @return dict\n        """\n        result={}\n        result[\'count\'] = dBSession.query(cls_).filter_by(**filters).count()\n        if result[\'count\'] > 0:\n            res = dBSession.query(cls_).filter_by(**filters)\n            for item in order:\n                orderItem = item.split(\',\')\n                if orderItem[1].upper() == \'DESC\':\n                    res= res.order_by(desc(orderItem[0]))\n                else:\n                    res = res.order_by(asc(orderItem[0]))\n            res = res.offset(offset).limit(limit).all()\n        if not field:\n            result[\'list\'] = [c.to_dict() for c in res]\n        else:\n            result[\'list\'] = [c.to_dict(only=field) for c in res]\n        return result\n\n    @staticmethod\n    def getAll(cls_,filters,order,field):\n        """\n        查询全部\n        @param object cls_ 数据库模型实体类\n        @param set filters 查询条件  {"id":1}\n        @param str order 排序\n        @param tuple field 字段  ("id","name")\n        @return dict\n        """\n        result = {}\n        if not filters:\n            res = dBSession.query(cls_)\n        else:\n            res = dBSession.query(cls_).filter_by(**filters)\n        result["count"] = res.count()\n        for _ in order:\n            orderArr = _.split(\',\')\n            if orderArr[1] == \'desc\':\n                res = res.order_by(desc(orderArr[0]))\n            else:\n                res = res.order_by(asc(orderArr[0]))\n        res = res.all()\n        if not field:\n            result["data"] = [c.to_dict() for c in res]\n        else:\n            result["data"] = [c.to_dict(only=field) for c in res]\n        return result\n\n    @staticmethod\n    def getOne(cls_,filters,field):\n        """\n        获取一条\n        @param object cls_ 数据库模型实体类\n        @param set filters 查询条件\n        @param tuple field 字段\n        @return dict\n        """\n        res = dBSession.query(cls_).filter_by(**filters).first()\n        if res == None:\n            return None\n        if not field:\n            res = res.to_dict()\n        else:\n            res = res.to_dict(only=field)\n        return res\n\n    @staticmethod\n    def add(cls_,data):\n        """\n        添加\n        @param object cls_ 数据库模型实体类\n        @param dict data 数据\n        @return bool\n        """\n        users = cls_(**data)\n        dBSession.add(users)\n        dBSession.commit()\n        return users.to_dict()\n\n    @staticmethod\n    def edit( cls_,data,filters):\n        """\n        修改\n        @param object cls_ 数据库模型实体类\n        @param dict data 数据\n        @param set filters 条件\n        """\n        re = dBSession.query(cls_).filter_by(**filters).update(data, synchronize_session=False)\n        if re:\n            return BaseModel.getOne(cls_,filters=filters,field=())\n        return None\n\n    @staticmethod\n    def delete(cls_,filters):\n        """\n        删除\n        @param object cls_ 数据库模型实体类\n        @param set filters 条件\n        @return int\n        """\n        re = dBSession.query(cls_).filter_by(**filters).delete(synchronize_session=False)\n        if re:\n            return BaseModel.getOne(cls_, filters=filters, field=())\n        return None\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br"),n("span",{staticClass:"line-number"},[s._v("109")]),n("br"),n("span",{staticClass:"line-number"},[s._v("110")]),n("br"),n("span",{staticClass:"line-number"},[s._v("111")]),n("br"),n("span",{staticClass:"line-number"},[s._v("112")]),n("br"),n("span",{staticClass:"line-number"},[s._v("113")]),n("br"),n("span",{staticClass:"line-number"},[s._v("114")]),n("br"),n("span",{staticClass:"line-number"},[s._v("115")]),n("br"),n("span",{staticClass:"line-number"},[s._v("116")]),n("br"),n("span",{staticClass:"line-number"},[s._v("117")]),n("br"),n("span",{staticClass:"line-number"},[s._v("118")]),n("br"),n("span",{staticClass:"line-number"},[s._v("119")]),n("br"),n("span",{staticClass:"line-number"},[s._v("120")]),n("br"),n("span",{staticClass:"line-number"},[s._v("121")]),n("br"),n("span",{staticClass:"line-number"},[s._v("122")]),n("br"),n("span",{staticClass:"line-number"},[s._v("123")]),n("br"),n("span",{staticClass:"line-number"},[s._v("124")]),n("br"),n("span",{staticClass:"line-number"},[s._v("125")]),n("br"),n("span",{staticClass:"line-number"},[s._v("126")]),n("br"),n("span",{staticClass:"line-number"},[s._v("127")]),n("br"),n("span",{staticClass:"line-number"},[s._v("128")]),n("br"),n("span",{staticClass:"line-number"},[s._v("129")]),n("br"),n("span",{staticClass:"line-number"},[s._v("130")]),n("br"),n("span",{staticClass:"line-number"},[s._v("131")]),n("br"),n("span",{staticClass:"line-number"},[s._v("132")]),n("br"),n("span",{staticClass:"line-number"},[s._v("133")]),n("br"),n("span",{staticClass:"line-number"},[s._v("134")]),n("br"),n("span",{staticClass:"line-number"},[s._v("135")]),n("br"),n("span",{staticClass:"line-number"},[s._v("136")]),n("br"),n("span",{staticClass:"line-number"},[s._v("137")]),n("br"),n("span",{staticClass:"line-number"},[s._v("138")]),n("br"),n("span",{staticClass:"line-number"},[s._v("139")]),n("br"),n("span",{staticClass:"line-number"},[s._v("140")]),n("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);